const curve=require("./curve"),nodeCrypto=require("crypto");function isNonNegativeInteger(a){return"number"===typeof a&&0===a%1&&0<=a}exports.generateIdentityKeyPair=curve.generateKeyPair;exports.generateRegistrationId=function(){return Uint16Array.from(nodeCrypto.randomBytes(2))[0]&16383};
exports.generateSignedPreKey=function(a,b){if(!(a.privKey instanceof Buffer&&32==a.privKey.byteLength&&a.pubKey instanceof Buffer)||33!=a.pubKey.byteLength)throw new TypeError("Invalid argument for identityKeyPair");if(!isNonNegativeInteger(b))throw new TypeError("Invalid argument for signedKeyId: "+b);const c=curve.generateKeyPair();a=curve.calculateSignature(a.privKey,c.pubKey);return{keyId:b,keyPair:c,signature:a}};
exports.generatePreKey=function(a){if(!isNonNegativeInteger(a))throw new TypeError("Invalid argument for keyId: "+a);const b=curve.generateKeyPair();return{keyId:a,keyPair:b}};
